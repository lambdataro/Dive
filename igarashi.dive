-- Dive テストファイル
-- 五十嵐先生の実験の型推論テストケース
-- http://www.sato.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-11w/testcases.html

true = True;
false = False;

{- 成功する例 -}
test01 = 1 + 2;
test02 = -2 * 2;
test03 = 1 < 2;
test04 = fun x -> x;
test05 = fun x -> fun y -> x;
test06 = fun x -> fun y -> y;
test07 = (fun x -> x + 1) 2 + (fun x -> x + -1) 3;
test08 = fun f -> fun g -> fun x -> g (f x);
test09 = fun x -> fun y -> fun z -> x z (y z);
test10 = fun x -> let y = x + 1 in x;
test11 = fun x -> let y = x + 1 in y;
test12 = fun b -> fun x -> if x b then x else (fun x -> b);
test13 = fun x -> if true then x else (if x then true else false);
test14 = fun x -> fun y -> if x then x else y;
test15 = fun n -> (fun x -> x (fun y -> y)) (fun f -> f n);
test16 = fun x -> fun y -> x y;
test17 = fun x -> fun y -> x (y x);
test18 = fun x -> fun y -> x (y x) (y x);
test19 = fun x -> fun y -> fun z -> x (z x) (y (z x y));
test20 = let id = fun x -> x in let f = fun y -> id (y id) in f;
test21 = let k = fun x -> fun y -> x in
         let k1 = fun x -> fun y -> k (x k) in k1;
test22 = let s = fun x -> fun y -> fun z -> x z (y z) in
         let s1 = fun x -> fun y -> fun z -> x s (z s) (y s (z s)) in s1;
test23 = let g = fun h -> fun t -> fun f -> fun x -> f h (t f x) in g;
test24 = let s = fun x -> fun y -> fun z -> x z (y z) in
         let k = fun x -> fun y -> x in
         let k' = fun x -> fun y -> x in
         s k k';
test25 = let s = fun x -> fun y -> fun z -> x z (y z) in
         let k = fun x -> fun y -> x in s k k;
test26 = let s = fun x -> fun y -> fun z -> x z (y z) in
         let k' = fun x -> fun y -> y in s k' k';
test27 = fun x -> fun y -> fun z -> let b = x y z in if b then z y else y;
test28 = let pair = fun x1 -> fun x2 -> fun y -> y x1 x2 in
         let proj1 = fun p -> p (fun x1 -> fun x2 -> x1) in
         let proj2 = fun p -> p (fun x1 -> fun x2 -> x2) in
         proj1 (pair 1 100);
test29 = let pair = fun x1 -> fun x2 -> fun y -> y x1 x2 in
         let proj1 = fun p -> p (fun x1 -> fun x2 -> x1) in
         let proj2 = fun p -> p (fun x1 -> fun x2 -> x2) in
         proj1 (proj2 (pair 10 (pair 20 30)));
test30 = let f = fun x -> x in if f true then f 1 else f 2;
test31 = let f = fun x -> 3 in f true + f 4;
test32 = fun b -> let f = fun x -> x in
                  let g = fun y -> y in if b then f g else g f;
test33 = fun b -> fun f -> let g1 = fun x -> x f in
                           let g2 = fun x -> x f in
                           fun z -> if b then g1 z g2 else g2 z g1;

{- 型エラーの例 -}
{-
test34 = 1 + true;
test35 = 2 + (fun x -> x);
test36 = -2 * false;
test37 = fun x -> x x;
test38 = let f = fun x -> fun g -> g (x x g) in f f;
test39 = let g = fun f -> fun x -> f x (f x) in g;
test40 = let g = fun f -> fun x -> f x (x f) in g;
test41 = fun x -> fun y -> x y + y x;
test42 = fun x -> fun y -> x y + x;
test43 = fun x -> fun y -> if x y then x else y;
test44 = fun x -> fun y -> if x y then (fun z -> if y z then z else x)
                                 else (fun x -> x);
test45 = fun x -> fun y -> fun z -> let b = x y z in if b then z y else z x;
test46 = fun x -> fun y -> fun z -> if x y then z x else y z;
test47 = fun x -> if x then 1 else x;
test48 = (fun x -> x + 1) true;
test49 = fun x -> fun y -> y (x (y x));
test50 = (fun f -> fun x -> f (f x)) (fun x -> fun y -> x);
test51 = fun x -> fun y -> y (x (fun z1 -> fun z2 -> z1)) (x (fun z -> z));
test52 = fun b -> fun f -> let g1 = fun x -> f x in
                           let g2 = fun x -> f x in
                           if b then g1 g2 else g2 g1;
-}

{- 再帰関数 -}
-- test53 = let rec f = fun x -> f in f;
test54 = let rec f = fun x -> f x in f;
test55 = let rec f = fun x -> f (f x) in f;
test56 = let rec fix_fun = fun g -> fun x -> g (fix_fun g) x in fix_fun;
test57 = fun f -> let rec x = fun z -> f (x z) in x 666;
test58 = let rec f = fun x -> fun y -> if x < 0 then y else f (x + -1) y in f;
test59 = fun f -> fun g -> let rec h = fun x -> h (g (f x)) in h;
test60 = let rec loop = fun f -> fun x -> (loop f) (f x) in loop;
-- test61 = let rec looq = fun f -> fun x -> (looq f) (x f) in looq;
test62 = fun x -> let rec f = fun y -> x + 1 in x;
test63 = let rec ind = fun x -> fun f -> fun n ->
           if n < 1 then x else f (ind x f (n + -1)) in ind;
-- test64 = let rec f = fun x -> f (x f) in f;
-- test65 = let rec f = fun z -> f z (fun g -> fun h -> h (g h)) in f;

{- リスト関数 -}
test66 = [];
test67 = [] : [];
test68 = fun x -> fun y -> x : y;
test69 = fun x -> fun f -> f (f x : []);
test70 = fun x -> match x { [] -> 0; h : t -> h };
-- test71 = 3 : true : [];
-- test72 = fun x -> x : x;
-- test73 = fun x -> fun y -> x : x y;
-- test74 = fun x -> fun y -> fun z -> x y : z x : y z : [];
-- test75 = fun x -> match x { [] -> 0; h : t -> x : t };
